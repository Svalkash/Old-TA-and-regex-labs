#include "pch.h"
//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : ReaderClass.sm
//

#include "ReaderClass.h"
#include "ReaderClass_sm.h"

using namespace statemap;

// Static class declarations.
RMap_Start RMap::Start("RMap::Start", 0);
RMap_Type RMap::Type("RMap::Type", 1);
RMap_NumP RMap::NumP("RMap::NumP", 2);
RMap_Num RMap::Num("RMap::Num", 3);
RMap_Body RMap::Body("RMap::Body", 4);
RMap_Sms RMap::Sms("RMap::Sms", 5);
RMap_NoSms RMap::NoSms("RMap::NoSms", 6);
RMap_OK RMap::OK("RMap::OK", 7);
RMap_Error RMap::Error("RMap::Error", 8);

void ReaderClassState::Colon(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Comma(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Dig(ReaderClassContext& context, char c)
{
    Default(context);
}

void ReaderClassState::EOS(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::EqualSign(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Lit(ReaderClassContext& context, char c)
{
    Default(context);
}

void ReaderClassState::Plus(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Reset(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Semicolon(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Unknown(ReaderClassContext& context)
{
    Default(context);
}

void ReaderClassState::Default(ReaderClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void RMap_Default::Dig(ReaderClassContext& context, char c)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Lit(ReaderClassContext& context, char c)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Plus(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Colon(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Comma(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Semicolon(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::EqualSign(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::Unknown(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Error);
    context.getState().Entry(context);

}

void RMap_Default::EOS(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.fFail();
        context.setState(RMap::Error);
    }
    catch (...)
    {
        context.setState(RMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void RMap_Default::Reset(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Start);
    context.getState().Entry(context);

}

void RMap_Start::Lit(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.addTS(c);
        context.setState(RMap::Type);
    }
    catch (...)
    {
        context.setState(RMap::Type);
        throw;
    }
    context.getState().Entry(context);

}

void RMap_Type::Colon(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkType())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RMap::NumP);
        context.getState().Entry(context);
    }
    else
    {
         RMap_Default::Colon(context);
    }

}

void RMap_Type::Lit(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkTL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addTS(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Lit(context, c);
    }

}

void RMap_NumP::Plus(ReaderClassContext& context)
{

    context.getState().Exit(context);
    context.setState(RMap::Num);
    context.getState().Entry(context);

}

void RMap_Num::Comma(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    if (!ctxt.checkNL())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.resetNS();
            context.setState(RMap::NumP);
        }
        catch (...)
        {
            context.setState(RMap::NumP);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         RMap_Default::Comma(context);
    }

}

void RMap_Num::Dig(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkNL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addNS(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Dig(context, c);
    }

}

void RMap_Num::Semicolon(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    if (!ctxt.checkNL())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.resetNS();
            context.setState(RMap::Body);
        }
        catch (...)
        {
            context.setState(RMap::Body);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         RMap_Default::Semicolon(context);
    }

}

void RMap_Body::EqualSign(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkBS() && ctxt.isSms())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RMap::Sms);
        context.getState().Entry(context);
    }
    else if (ctxt.checkBS())

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RMap::NoSms);
        context.getState().Entry(context);
    }    else
    {
         RMap_Default::EqualSign(context);
    }

}

void RMap_Body::Lit(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkBL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addBS(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Lit(context, c);
    }

}

void RMap_Sms::Comma(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkSL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.incSL();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Comma(context);
    }

}

void RMap_Sms::Dig(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkSL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.incSL();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Dig(context, c);
    }

}

void RMap_Sms::EOS(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.fSuccess();
        context.setState(RMap::OK);
    }
    catch (...)
    {
        context.setState(RMap::OK);
        throw;
    }
    context.getState().Entry(context);

}

void RMap_Sms::Lit(ReaderClassContext& context, char c)
{
    ReaderClass& ctxt = context.getOwner();

    if (ctxt.checkSL())
    {
        ReaderClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.incSL();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         RMap_Default::Lit(context, c);
    }

}

void RMap_NoSms::EOS(ReaderClassContext& context)
{
    ReaderClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.fSuccess();
        context.setState(RMap::OK);
    }
    catch (...)
    {
        context.setState(RMap::OK);
        throw;
    }
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
