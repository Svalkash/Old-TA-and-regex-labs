//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class MainMap;
class MainMap_TypeName;
class MainMap_Name;
class MainMap_WE;
class MainMap_String1;
class MainMap_WSign;
class MainMap_WS;
class MainMap_String2;
class MainMap_OK;
class MainMap_Error;
class MainMap_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void Colon(AppClassContext& context);
    virtual void Digit(AppClassContext& context, char c);
    virtual void EOS(AppClassContext& context);
    virtual void EqualSign(AppClassContext& context);
    virtual void Letter(AppClassContext& context, char c);
    virtual void Reset(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class MainMap
{
public:

    static MainMap_TypeName TypeName;
    static MainMap_Name Name;
    static MainMap_WE WE;
    static MainMap_String1 String1;
    static MainMap_WSign WSign;
    static MainMap_WS WS;
    static MainMap_String2 String2;
    static MainMap_OK OK;
    static MainMap_Error Error;
};

class MainMap_Default :
    public AppClassState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void Letter(AppClassContext& context, char c);
    virtual void Digit(AppClassContext& context, char c);
    virtual void Space(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void EqualSign(AppClassContext& context);
    virtual void Colon(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void Reset(AppClassContext& context);
};

class MainMap_TypeName :
    public MainMap_Default
{
public:
    MainMap_TypeName(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Colon(AppClassContext& context);
    virtual void Digit(AppClassContext& context, char c);
    virtual void Letter(AppClassContext& context, char c);
    virtual void Space(AppClassContext& context);
};

class MainMap_Name :
    public MainMap_Default
{
public:
    MainMap_Name(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Colon(AppClassContext& context);
    virtual void Digit(AppClassContext& context, char c);
    virtual void Letter(AppClassContext& context, char c);
};

class MainMap_WE :
    public MainMap_Default
{
public:
    MainMap_WE(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EqualSign(AppClassContext& context);
};

class MainMap_String1 :
    public MainMap_Default
{
public:
    MainMap_String1(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Digit(AppClassContext& context, char c);
    virtual void Letter(AppClassContext& context, char c);
    virtual void Space(AppClassContext& context);
};

class MainMap_WSign :
    public MainMap_Default
{
public:
    MainMap_WSign(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Sign(AppClassContext& context);
};

class MainMap_WS :
    public MainMap_Default
{
public:
    MainMap_WS(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Space(AppClassContext& context);
};

class MainMap_String2 :
    public MainMap_Default
{
public:
    MainMap_String2(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Digit(AppClassContext& context, char c);
    virtual void EOS(AppClassContext& context);
    virtual void Letter(AppClassContext& context, char c);
};

class MainMap_OK :
    public MainMap_Default
{
public:
    MainMap_OK(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class MainMap_Error :
    public MainMap_Default
{
public:
    MainMap_Error(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(MainMap::TypeName),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void Colon()
    {
        getState().Colon(*this);
    };

    inline void Digit(char c)
    {
        getState().Digit(*this, c);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void EqualSign()
    {
        getState().EqualSign(*this);
    };

    inline void Letter(char c)
    {
        getState().Letter(*this, c);
    };

    inline void Reset()
    {
        getState().Reset(*this);
    };

    inline void Sign()
    {
        getState().Sign(*this);
    };

    inline void Space()
    {
        getState().Space(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
