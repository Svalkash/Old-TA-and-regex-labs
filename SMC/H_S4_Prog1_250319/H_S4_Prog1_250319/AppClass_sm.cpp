//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#include "AppClass.h"
#include "AppClass_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_TypeName MainMap::TypeName("MainMap::TypeName", 0);
MainMap_Name MainMap::Name("MainMap::Name", 1);
MainMap_WE MainMap::WE("MainMap::WE", 2);
MainMap_String1 MainMap::String1("MainMap::String1", 3);
MainMap_WSign MainMap::WSign("MainMap::WSign", 4);
MainMap_WS MainMap::WS("MainMap::WS", 5);
MainMap_String2 MainMap::String2("MainMap::String2", 6);
MainMap_OK MainMap::OK("MainMap::OK", 7);
MainMap_Error MainMap::Error("MainMap::Error", 8);

void AppClassState::Colon(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Digit(AppClassContext& context, char c)
{
    Default(context);
}

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::EqualSign(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter(AppClassContext& context, char c)
{
    Default(context);
}

void AppClassState::Reset(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Sign(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Space(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Default::Letter(AppClassContext& context, char c)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Digit(AppClassContext& context, char c)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Sign(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::EqualSign(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Colon(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::Reset(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::TypeName);
    context.getState().Entry(context);

}

void MainMap_TypeName::Colon(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkTFL() && ctxt.checkTNlenN())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.setDefTN();
            ctxt.sch();
            context.setState(MainMap::WE);
        }
        catch (...)
        {
            context.setState(MainMap::WE);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::Colon(context);
    }

}

void MainMap_TypeName::Digit(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkTNlen())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addTN(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Digit(context, c);
    }

}

void MainMap_TypeName::Letter(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkTNlen())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addTN(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Letter(context, c);
    }

}

void MainMap_TypeName::Space(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkTN())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.sch();
            context.setState(MainMap::Name);
        }
        catch (...)
        {
            context.setState(MainMap::Name);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::Space(context);
    }

}

void MainMap_Name::Colon(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkFL() && ctxt.checkNlenN())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.sch();
            context.setState(MainMap::WE);
        }
        catch (...)
        {
            context.setState(MainMap::WE);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::Colon(context);
    }

}

void MainMap_Name::Digit(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkNlen())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addN(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Digit(context, c);
    }

}

void MainMap_Name::Letter(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkNlen())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addN(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Letter(context, c);
    }

}

void MainMap_WE::EqualSign(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.sch();
        context.setState(MainMap::String1);
    }
    catch (...)
    {
        context.setState(MainMap::String1);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_String1::Digit(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS1len() || ctxt.notLF1())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addS1(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Digit(context, c);
    }

}

void MainMap_String1::Letter(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS1len())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addS1(c);
            ctxt.setLF1();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Letter(context, c);
    }

}

void MainMap_String1::Space(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS1())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.sch();
            context.setState(MainMap::WSign);
        }
        catch (...)
        {
            context.setState(MainMap::WSign);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::Space(context);
    }

}

void MainMap_WSign::Sign(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.sch();
        context.setState(MainMap::WS);
    }
    catch (...)
    {
        context.setState(MainMap::WS);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_WS::Space(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.sch();
        context.setState(MainMap::String2);
    }
    catch (...)
    {
        context.setState(MainMap::String2);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_String2::Digit(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS2len() || ctxt.notLF2())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addS2(c);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Digit(context, c);
    }

}

void MainMap_String2::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS2())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Acceptable();
            ctxt.sch();
            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_String2::Letter(AppClassContext& context, char c)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkS2len())
    {
        AppClassState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addS2(c);
            ctxt.setLF2();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::Letter(context, c);
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
